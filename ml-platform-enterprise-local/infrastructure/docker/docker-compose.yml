version: '3.8'

services:
  # PostgreSQL with replication
  postgres-primary:
    image: postgres:15-alpine
    container_name: ml-postgres-primary
    environment:
      POSTGRES_DB: mlplatform
      POSTGRES_USER: mluser
      POSTGRES_PASSWORD: mlpass123
      POSTGRES_REPLICATION_MODE: master
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: reppass123
    volumes:
      - postgres_primary:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - ml-platform-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mluser"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis-master:
    image: redis:7-alpine
    container_name: ml-redis-master
    command: redis-server --requirepass redispass123
    ports:
      - "6379:6379"
    volumes:
      - redis_master:/data
    networks:
      - ml-platform-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redispass123", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB
  mongodb:
    image: mongo:6
    container_name: ml-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: mongopass123
      MONGO_INITDB_DATABASE: mlplatform
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - ml-platform-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka & Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: ml-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - ml-platform-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: ml-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - ml-platform-network

  # MinIO (S3 compatible storage)
  minio:
    image: minio/minio:latest
    container_name: ml-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - ml-platform-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Vault for secrets
  vault:
    # image: vault:latest
    image: hashicorp/vault:1.15
    container_name: ml-vault
    cap_add:
      - IPC_LOCK 
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: myroot
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
    ports:
      - "8200:8200"
    networks:
      - ml-platform-network

networks:
  ml-platform-network:
    external: true

volumes:
  postgres_primary:
  redis_master:
  mongodb_data:
  minio_data:
